name: Keep Servers Alive

on:
  schedule:
    - cron: '0 */12 * * *' # Runs every 12 hours
  workflow_dispatch: # Allows manual triggering

jobs:
  keep_servers_alive:
    runs-on: ubuntu-latest
    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass curl jq

      - name: Process each account
        env:
          ACCOUNTS_JSON: ${{ secrets.ACCOUNTS_JSON }}
        run: |
          # Initialize a results file for Telegram message
          echo "Starting Keep Servers Alive Process..." > results.txt

          # Function to execute remote commands
          run_remote_command() {
            local RES=$1
            local SSH_USER=$2
            local SSH_PASS=$3
            local REALITY=${4}
            local SUUID=$5
            local TCP1_PORT=$6
            local TCP2_PORT=$7
            local UDP_PORT=$8
            local HOST=$9
            local ARGO_DOMAIN=${10}
            local ARGO_AUTH=${11}

            if [ -z "${ARGO_DOMAIN}" ]; then
              echo "Argo域名为空，申请Argo临时域名"
            else
              echo "Argo已设置固定域名：${ARGO_DOMAIN}"
            fi

            remote_command="export reym=$REALITY UUID=$SUUID vless_port=$TCP1_PORT vmess_port=$TCP2_PORT hy2_port=$UDP_PORT reset=$RES ARGO_DOMAIN=${ARGO_DOMAIN} ARGO_AUTH=${ARGO_AUTH} && bash <(curl -Ls https://raw.githubusercontent.com/yonggekkk/sing-box-yg/main/serv00keep.sh)"
            echo "Executing remote command on $HOST as $SSH_USER with command: $remote_command"
            sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no "$SSH_USER@$HOST" "$remote_command"
          }

          # Process each account in ACCOUNTS_JSON
          count=0
          for account in $(echo "${ACCOUNTS_JSON}" | jq -c '.[]'); do
            count=$((count + 1))
            RES=$(echo $account | jq -r '.RES')
            SSH_USER=$(echo $account | jq -r '.SSH_USER')
            SSH_PASS=$(echo $account | jq -r '.SSH_PASS')
            REALITY=$(echo $account | jq -r '.REALITY')
            SUUID=$(echo $account | jq -r '.SUUID')
            TCP1_PORT=$(echo $account | jq -r '.TCP1_PORT')
            TCP2_PORT=$(echo $account | jq -r '.TCP2_PORT')
            UDP_PORT=$(echo $account | jq -r '.UDP_PORT')
            HOST=$(echo $account | jq -r '.HOST')
            ARGO_DOMAIN=$(echo $account | jq -r '.ARGO_DOMAIN')
            ARGO_AUTH=$(echo $account | jq -r '.ARGO_AUTH')

            if sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no "$SSH_USER@$HOST" -q exit; then
              echo "✅ Server $count: $HOST ($SSH_USER) connected successfully." | tee -a results.txt
              if [ -z "${ARGO_DOMAIN}" ]; then
                check_process="ps aux | grep '[c]onfig' > /dev/null && ps aux | grep [l]ocalhost:$TCP2_PORT > /dev/null"
              else
                check_process="ps aux | grep '[c]onfig' > /dev/null && ps aux | grep '[t]oken $ARGO_AUTH' > /dev/null"
              fi

              if ! sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no "$SSH_USER@$HOST" "$check_process" || [[ "$RES" =~ ^[Yy]$ ]]; then
                echo "⚠️ Server $count: Processes not running. Redeploying..." | tee -a results.txt
                output=$(run_remote_command "$RES" "$SSH_USER" "$SSH_PASS" "${REALITY}" "$SUUID" "$TCP1_PORT" "$TCP2_PORT" "$UDP_PORT" "$HOST" "${ARGO_DOMAIN}" "${ARGO_AUTH}")
                echo "Server $count redeployment result: $output" | tee -a results.txt
              else
                echo "✅ Server $count: All processes running as expected." | tee -a results.txt
              fi
            else
              echo "❌ Server $count: Failed to connect to $HOST ($SSH_USER)." | tee -a results.txt
            fi
          done

      - name: Send Results to Telegram
        run: |
          MESSAGE=$(cat results.txt)
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="$MESSAGE" \
            -d parse_mode="Markdown"
